const { Telegraf, Markup } = require("telegraf");
const { saveUser, getAllUsers, getUserByTelegramId } = require("./db");

const catalogLabel = require("./data/catalogLabel");
const catalogs = require("./data/catalogs");
const videos = require("./data/videos");
const certificates = require("./data/certificates");
const socials = require("./data/socials");
const roles = require("./data/roles");
const presentations = require("./data/presentations");


const bot = new Telegraf("7939466163:AAHSHdyDpTLTobDGW09jtmh9e9JBdj1fiJI");

// Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
const adminIds = [214781828, 404752714, 716230412];

// –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥ —Ä–æ–ª–ª—é
const userSessions = new Map();
const adminPages = new Map(); // key: admin ID, value: current page

bot.start((ctx) => {
    const userId = ctx.from.id.toString();

    getUserByTelegramId(userId, (user) => {
        if (user) {
            ctx.reply(
                `üëã –í—ñ—Ç–∞—î–º–æ –í–∞—Å –∑–Ω–æ–≤—É –Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–Ω–æ–º—É –ø–æ—Ä—Ç–∞–ª—ñ Vikna Style, ${user.name || "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"}!\n–û—Å—å –≤–∞—à–µ –º–µ–Ω—é:`,
                getMainMenu(adminIds.includes(ctx.from.id))
            );
        } else {
            ctx.reply(
                "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç:",
                Markup.keyboard([
                    Markup.button.contactRequest("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
                ]).resize()
            );
        }
    });
});

// –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ
bot.on("contact", (ctx) => {
    const contact = ctx.message.contact;

    userSessions.set(ctx.from.id.toString(), {
        telegram_id: ctx.from.id.toString(),
        username: ctx.from.username || "",
        name: ctx.from.first_name + " " + (ctx.from.last_name || ""),
        phone: contact.phone_number
    });

    ctx.reply(
        "–•—Ç–æ –≤–∏?",
        Markup.keyboard(roles).resize().oneTime()
    );
});
const groupChats = new Set();

// –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É —ñ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
const flatRoles = roles.flat(); // –ø–ª–æ—Å–∫–∏–π –º–∞—Å–∏–≤

bot.hears(flatRoles, (ctx) => {
    const role = ctx.message.text;
    const session = userSessions.get(ctx.from.id.toString());

    if (!session) {
        return ctx.reply("üòî –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —â–µ —Ä–∞–∑: /start");
    }

    getUserByTelegramId(session.telegram_id, (user) => {
        if (user) {
            ctx.reply("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –û—Å—å –º–µ–Ω—é:", getMainMenu(ctx.from.id));
            userSessions.delete(ctx.from.id);
        } else {
            const newUser = { ...session, role };
            saveUser(newUser);
            userSessions.delete(ctx.from.id);
            ctx.reply("–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –û—Å—å –º–µ–Ω—é:", getMainMenu(ctx.from.id));
        }
    });
});


// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ‚Äî –∑–≤–∏—á–∞–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
function getMainMenu(userId) {
    const isAdmin = adminIds.includes(Number(userId));
    const buttons = [
        ["üìÇ –ö–∞—Ç–∞–ª–æ–≥–∏", "üéÅ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó"],
        ["üé• –í—ñ–¥–µ–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞", "üìú –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏"],
        ["üì± –ú–∏ —É TikTok", "üì∏ –ù–∞—à Instagram"],
        ["üìò –ù–∞—à Facebook", "üí¨ –°–ø—ñ–ª—å–Ω–æ—Ç–∞ —É Viber"]
    ];

    if (isAdmin) {
        buttons.push(["üì£ –†–æ–∑—Å–∏–ª–∫–∞"]);
    }

    return Markup.keyboard(buttons).resize();
}

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ –ø—ñ–¥–º–µ–Ω—é

function chunk(array, size) {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
        result.push(array.slice(i, i + size));
    }
    return result;
}

bot.hears("üìÇ –ö–∞—Ç–∞–ª–æ–≥–∏", (ctx) => {
    const buttons = chunk(catalogLabel, 3);
    buttons.push(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]);
    ctx.reply("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–∞–ª–æ–≥:", Markup.keyboard(buttons).resize());
});

catalogs.forEach((catalog) => {
    bot.hears(catalog.label, (ctx) => {
        const filepath = `./files/catalogs/${catalog.file}`;
        ctx.reply(`–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ ${catalog.label}:`);
        ctx.replyWithDocument({
            source: filepath,
            filename: catalog.file
        });
    });
});

// const chunk = (arr, size) => {
//     const result = [];
//     for (let i = 0; i < arr.length; i += size) {
//         result.push(arr.slice(i, i + size));
//     }
//     return result;
// };

bot.hears("üéÅ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó", (ctx) => {
    const buttons = chunk(presentations.map(p => p.label), 2); // –ø–æ 2 –≤ —Ä—è–¥
    buttons.push(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]);
    ctx.reply("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó:", Markup.keyboard(buttons).resize());
});


presentations.forEach((presentation) => {
    bot.hears(presentation.label, (ctx) => {
        const filepath = `./files/presentations/${presentation.file}`;
        ctx.reply(`–û—Å—å —Ñ–∞–π–ª ${presentation.label}:`);
        ctx.replyWithDocument({
            source: filepath,
            filename: presentation.file
        });
    });
});


// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–±–∏—Ç—Ç—è –Ω–∞ –ø—ñ–¥–º–∞—Å–∏–≤–∏ –ø–æ 2

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –≤—ñ–¥–µ–æ –ø–æ 2 –≤ —Ä—è–¥
bot.hears("üé• –í—ñ–¥–µ–æ –≤–∏—Ä–æ–±–Ω–∏–∫–∞", (ctx) => {
    const buttons = chunk(videos.map(video => video.title), 2); // –ø–æ 2 –≤ —Ä—è–¥
    buttons.push(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]);
    ctx.reply("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ:", Markup.keyboard(buttons).resize());
});

videos.forEach(video => {
    bot.hears(video.title, (ctx) => {
        ctx.reply(`${video.title}:\n${video.url}`);
    });
});


bot.hears("üìú –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏", (ctx) => {
    const buttons = chunk(certificates.map(c => c.title), 2);
    buttons.push(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]);
    ctx.reply("–û–±–µ—Ä—ñ—Ç—å —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏:", Markup.keyboard(buttons).resize());
});

certificates.forEach(c => {
    bot.hears(c.title, (ctx) => {
        ctx.reply(`${c.title}:\n${c.url}`);
    });
});

socials.forEach(s => {
    bot.hears(s.title, (ctx) => {
        ctx.reply(`${s.title}:\n${s.url}`);
    });
});

// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.hears("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", (ctx) => {
    ctx.reply("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", getMainMenu(ctx.from.id));
});

// –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º—ñ–Ω–∞ /admin –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
bot.command("admin", (ctx) => {
    if (!adminIds.includes(ctx.from.id)) {
        return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.");
    }

    const page = 1;
    adminPages.set(ctx.from.id, page);
    sendAdminPage(ctx, page);
});

async function sendAdminPage(ctx, page = 1) {
    const perPage = 10;

    const users = await getAllUsers(); // üü¢ —Ç–µ–ø–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

    const total = users.length;
    if (!total) return ctx.reply("–©–µ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");

    const totalPages = Math.ceil(total / perPage);
    if (page > totalPages) page = totalPages;

    const start = (page - 1) * perPage;
    const end = start + perPage;
    const usersOnPage = users.slice(start, end);

    let text = `üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ ${page} –∑ ${totalPages}):\n\n`;
    usersOnPage.forEach((user, i) => {
        text += `${start + i + 1}. üÜî ${user.telegram_id}${user.username ? `, @${user.username}` : ""}\n` +
            `üë§ ${user.name}\nüìû ${user.phone}\nüéØ ${user.role}\n\n`;
    });

    const buttons = [];
    if (page > 1) buttons.push("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è");
    if (page < totalPages) buttons.push("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞");

    ctx.reply(text, Markup.keyboard([
        buttons,
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]).resize());
}


bot.hears("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", (ctx) => {
    if (!adminIds.includes(ctx.from.id)) return;

    const currentPage = adminPages.get(ctx.from.id) || 1;
    if (currentPage > 1) {
        const newPage = currentPage - 1;
        adminPages.set(ctx.from.id, newPage);
        sendAdminPage(ctx, newPage);
    }
});

bot.hears("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", async (ctx) => {
    if (!adminIds.includes(ctx.from.id)) return;

    const currentPage = adminPages.get(ctx.from.id) || 1;
    const perPage = 10;

    const users = await getAllUsers(); // üü¢
    const totalPages = Math.ceil(users.length / perPage);
    if (currentPage < totalPages) {
        const newPage = currentPage + 1;
        adminPages.set(ctx.from.id, newPage);
        sendAdminPage(ctx, newPage);
    }
});


// –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
const groupChatIds = new Set([
    -1001292061252, // ‚Üê –≤—Ä—É—á–Ω—É –¥–æ–¥–∞–Ω–∞ –≥—Ä—É–ø–∞
]);
const broadcastState = new Map();

bot.hears("üì£ –†–æ–∑—Å–∏–ª–∫–∞", (ctx) => {
    if (!adminIds.includes(ctx.from.id)) return;

    broadcastState.set(ctx.from.id, { step: "askFile" });
    ctx.reply("‚ùì –•–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è?", Markup.keyboard([
        ["–¢–∞–∫", "–ù—ñ"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]).resize());
});

bot.on("message", async (ctx) => {
    const userId = ctx.from.id;
    const state = broadcastState.get(userId);
    if (!adminIds.includes(userId) || !state) return;

    const msg = ctx.message;

    // 1. –•–æ—á–µ—Ç–µ —Ñ–∞–π–ª?
    if (state.step === "askFile") {
        if (msg.text === "–¢–∞–∫") {
            state.step = "waitingFile";
            ctx.reply("üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏.", {
                reply_markup: { remove_keyboard: true }
            });
        } else if (msg.text === "–ù—ñ") {
            state.step = "waitingText";
            ctx.reply("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", {
                reply_markup: { remove_keyboard: true }
            });
        }
        return;
    }

    // 2. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
    if (state.step === "waitingFile") {
        const mediaTypes = ["photo", "video", "document", "audio", "voice"];
        const mediaType = mediaTypes.find((t) => msg[t]);

        if (!mediaType) {
            return ctx.reply("‚ö†Ô∏è –¶–µ –Ω–µ —Ñ–∞–π–ª. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª.");
        }

        state.mediaType = mediaType;
        state.fileId = msg[mediaType][0]?.file_id || msg[mediaType]?.file_id;
        state.step = "waitingText";

        return ctx.reply("‚úèÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:");
    }

    // 3. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    if (state.step === "waitingText") {
        state.text = msg.text || msg.caption || "";
        state.step = "confirmAudience";

        let preview = "üìù <b>–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:</b>\n\n";
        if (state.fileId) preview += `üìé –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª (${state.mediaType})\n`;
        preview += `üóíÔ∏è –¢–µ–∫—Å—Ç:\n${state.text}`;

        ctx.reply(preview, {
            parse_mode: "HTML",
            ...Markup.inlineKeyboard([
                [Markup.button.callback("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", "send_users")],
                [Markup.button.callback("üë• –ì—Ä—É–ø–∞–º", "send_groups")],
                [Markup.button.callback("üì¢ –í—Å—ñ–º", "send_all")],
                [Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "confirm_cancel")]
            ])
        });
    }
});

// –§—É–Ω–∫—Ü—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
async function sendBroadcast(ctx, sendTo = "all") {
    const userId = ctx.from.id;
    const state = broadcastState.get(userId);
    if (!state) return ctx.answerCbQuery("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏.");

    await ctx.answerCbQuery("‚è≥ –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ—á–∞–ª–∞—Å—å...");

    const users = await getAllUsers();
    const groups = Array.from(groupChatIds);

    let recipients = [];
    if (sendTo === "users") recipients = users.map(u => u.telegram_id);
    else if (sendTo === "groups") recipients = groups;
    else recipients = [...users.map(u => u.telegram_id), ...groups];

    let success = 0, failed = 0;

    for (const chatId of recipients) {
        try {
            const options = {
                caption: state.text + "\n\n–ó –ø–æ–≤–∞–≥–æ—é, –ö–æ–º–ø–∞–Ω—ñ—è ü™ü ¬´–í—ñ–∫–Ω–∞ –°—Ç–∏–ª—å –¢—Ä–µ–π–¥—ñ–Ω–≥¬ª",
                parse_mode: "HTML"
            };

            if (state.fileId && state.mediaType) {
                switch (state.mediaType) {
                    case "photo": await ctx.telegram.sendPhoto(chatId, state.fileId, options); break;
                    case "video": await ctx.telegram.sendVideo(chatId, state.fileId, options); break;
                    case "document": await ctx.telegram.sendDocument(chatId, state.fileId, options); break;
                    case "audio": await ctx.telegram.sendAudio(chatId, state.fileId, options); break;
                    case "voice": await ctx.telegram.sendVoice(chatId, state.fileId, options); break;
                }
            } else {
                await ctx.telegram.sendMessage(chatId, state.text + "\n\n–ó –ø–æ–≤–∞–≥–æ—é, –∫–æ–º–∞–Ω–¥–∞ ü™ü Vikna Style", {
                    parse_mode: "HTML"
                });
            }

            success++;
        } catch (err) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è ${chatId}:`, err.message);
            failed++;
        }
    }

    broadcastState.delete(userId);
    ctx.editMessageText(`‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\nüì® –ù–∞–¥—ñ—Å–ª–∞–Ω–æ: ${success}\n‚ùå –ü–æ–º–∏–ª–æ–∫: ${failed}`);
    ctx.reply("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", getMainMenu(userId));
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
bot.action("send_users", (ctx) => sendBroadcast(ctx, "users"));
bot.action("send_groups", (ctx) => sendBroadcast(ctx, "groups"));
bot.action("send_all", (ctx) => sendBroadcast(ctx, "all"));

bot.action("confirm_cancel", async (ctx) => {
    const userId = ctx.from.id;
    broadcastState.delete(userId);

    await ctx.answerCbQuery("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ");
    try {
        await ctx.editMessageText("–†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
    } catch (e) {}

    ctx.reply("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", getMainMenu(userId));
});

const port = process.env.PORT || 8080;

bot.launch({
  webhook: {
    domain: "https://viknastylebot-production.up.railway.app",
    port: port,
  }
});
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ${domain}:${port}");
